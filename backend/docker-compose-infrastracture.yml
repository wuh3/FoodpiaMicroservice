version: '3.8'

services:
  # Kafka Service for Development
  kafka:
    image: docker.io/bitnami/kafka:3.9
    container_name: foodopia-dev-kafka
    ports:
      - "9092:9092"
    volumes:
      - "kafka_data:/bitnami"
    environment:
      # KRaft settings
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      # Listeners - configured for localhost access
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      # Additional settings for development
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CFG_LOG_RETENTION_HOURS=24
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped

  # MongoDB Database for Development
  mongodb:
    image: mongo:6.0
    container_name: foodopia-dev-mongodb
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
      # MongoDB will create databases automatically when first accessed
    volumes:
      - mongodb_data:/data/db
      - ./init-mongodb.js:/docker-entrypoint-initdb.d/init-mongodb.js:ro
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  # Optional: Kafka UI for Development (makes it easier to monitor topics)
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: foodopia-kafka-ui
    ports:
      - "8090:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
    depends_on:
      kafka:
        condition: service_healthy
    restart: unless-stopped

  # Optional: MongoDB Express for Development (database management UI)
#  mongo-express:
#    image: mongo-express:latest
#    container_name: foodopia-mongo-express
#    ports:
#      - "8091:8081"
#    environment:
#      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
#      ME_CONFIG_MONGODB_ADMINPASSWORD: password
#      ME_CONFIG_MONGODB_URL: mongodb://admin:password@mongodb:27017/
#      ME_CONFIG_BASICAUTH_USERNAME: admin
#      ME_CONFIG_BASICAUTH_PASSWORD: admin
#    depends_on:
#      mongodb:
#        condition: service_healthy
#    restart: unless-stopped

volumes:
  mongodb_data:
    driver: local
  kafka_data:
    driver: local