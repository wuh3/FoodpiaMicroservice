{"ast":null,"code":"import axios from 'axios';\nconst API_URL = '/api/auth/';\nclass AuthService {\n  async login(username, password) {\n    try {\n      const response = await axios.post(API_URL + 'login', {\n        username,\n        password\n      });\n\n      // Assuming the backend returns a success field and username\n      if (response.data.success) {\n        return {\n          success: true,\n          user: {\n            username: response.data.username\n            // Add other user data as needed\n          }\n        };\n      } else {\n        return {\n          success: false,\n          message: response.data.message || 'Login failed'\n        };\n      }\n    } catch (error) {\n      let message = 'An error occurred during login';\n      if (error.response) {\n        // The request was made and the server responded with a status code\n        // that falls out of the range of 2xx\n        message = error.response.data.message || 'Authentication failed';\n      }\n      return {\n        success: false,\n        message\n      };\n    }\n  }\n  async register(username, email, password, confirmPassword) {\n    try {\n      const response = await axios.post(API_URL + 'register', {\n        username,\n        email,\n        password,\n        confirmPassword\n      });\n      return {\n        success: true,\n        message: 'Registration successful'\n      };\n    } catch (error) {\n      let message = 'An error occurred during registration';\n      if (error.response) {\n        message = error.response.data.message || 'Registration failed';\n      }\n      return {\n        success: false,\n        message\n      };\n    }\n  }\n  async checkUsernameAvailability(username) {\n    try {\n      const response = await axios.get(API_URL + `check-username/${username}`);\n      return response.data.available;\n    } catch (error) {\n      console.error('Error checking username availability:', error);\n      return false;\n    }\n  }\n}\nexport default new AuthService();","map":{"version":3,"names":["axios","API_URL","AuthService","login","username","password","response","post","data","success","user","message","error","register","email","confirmPassword","checkUsernameAvailability","get","available","console"],"sources":["/Users/haozhewu/Desktop/Food0pia2.0/FoodopiaPlatform/foodopia/src/main/frontend/src/services/AuthService.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = '/api/auth/';\n\nclass AuthService {\n    async login(username, password) {\n        try {\n            const response = await axios.post(API_URL + 'login', {\n                username,\n                password\n            });\n\n            // Assuming the backend returns a success field and username\n            if (response.data.success) {\n                return {\n                    success: true,\n                    user: {\n                        username: response.data.username,\n                        // Add other user data as needed\n                    }\n                };\n            } else {\n                return {\n                    success: false,\n                    message: response.data.message || 'Login failed'\n                };\n            }\n        } catch (error) {\n            let message = 'An error occurred during login';\n            if (error.response) {\n                // The request was made and the server responded with a status code\n                // that falls out of the range of 2xx\n                message = error.response.data.message || 'Authentication failed';\n            }\n            return {\n                success: false,\n                message\n            };\n        }\n    }\n\n    async register(username, email, password, confirmPassword) {\n        try {\n            const response = await axios.post(API_URL + 'register', {\n                username,\n                email,\n                password,\n                confirmPassword\n            });\n\n            return {\n                success: true,\n                message: 'Registration successful'\n            };\n        } catch (error) {\n            let message = 'An error occurred during registration';\n            if (error.response) {\n                message = error.response.data.message || 'Registration failed';\n            }\n            return {\n                success: false,\n                message\n            };\n        }\n    }\n\n    async checkUsernameAvailability(username) {\n        try {\n            const response = await axios.get(API_URL + `check-username/${username}`);\n            return response.data.available;\n        } catch (error) {\n            console.error('Error checking username availability:', error);\n            return false;\n        }\n    }\n}\n\nexport default new AuthService();"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,YAAY;AAE5B,MAAMC,WAAW,CAAC;EACd,MAAMC,KAAKA,CAACC,QAAQ,EAAEC,QAAQ,EAAE;IAC5B,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMN,KAAK,CAACO,IAAI,CAACN,OAAO,GAAG,OAAO,EAAE;QACjDG,QAAQ;QACRC;MACJ,CAAC,CAAC;;MAEF;MACA,IAAIC,QAAQ,CAACE,IAAI,CAACC,OAAO,EAAE;QACvB,OAAO;UACHA,OAAO,EAAE,IAAI;UACbC,IAAI,EAAE;YACFN,QAAQ,EAAEE,QAAQ,CAACE,IAAI,CAACJ;YACxB;UACJ;QACJ,CAAC;MACL,CAAC,MAAM;QACH,OAAO;UACHK,OAAO,EAAE,KAAK;UACdE,OAAO,EAAEL,QAAQ,CAACE,IAAI,CAACG,OAAO,IAAI;QACtC,CAAC;MACL;IACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZ,IAAID,OAAO,GAAG,gCAAgC;MAC9C,IAAIC,KAAK,CAACN,QAAQ,EAAE;QAChB;QACA;QACAK,OAAO,GAAGC,KAAK,CAACN,QAAQ,CAACE,IAAI,CAACG,OAAO,IAAI,uBAAuB;MACpE;MACA,OAAO;QACHF,OAAO,EAAE,KAAK;QACdE;MACJ,CAAC;IACL;EACJ;EAEA,MAAME,QAAQA,CAACT,QAAQ,EAAEU,KAAK,EAAET,QAAQ,EAAEU,eAAe,EAAE;IACvD,IAAI;MACA,MAAMT,QAAQ,GAAG,MAAMN,KAAK,CAACO,IAAI,CAACN,OAAO,GAAG,UAAU,EAAE;QACpDG,QAAQ;QACRU,KAAK;QACLT,QAAQ;QACRU;MACJ,CAAC,CAAC;MAEF,OAAO;QACHN,OAAO,EAAE,IAAI;QACbE,OAAO,EAAE;MACb,CAAC;IACL,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZ,IAAID,OAAO,GAAG,uCAAuC;MACrD,IAAIC,KAAK,CAACN,QAAQ,EAAE;QAChBK,OAAO,GAAGC,KAAK,CAACN,QAAQ,CAACE,IAAI,CAACG,OAAO,IAAI,qBAAqB;MAClE;MACA,OAAO;QACHF,OAAO,EAAE,KAAK;QACdE;MACJ,CAAC;IACL;EACJ;EAEA,MAAMK,yBAAyBA,CAACZ,QAAQ,EAAE;IACtC,IAAI;MACA,MAAME,QAAQ,GAAG,MAAMN,KAAK,CAACiB,GAAG,CAAChB,OAAO,GAAG,kBAAkBG,QAAQ,EAAE,CAAC;MACxE,OAAOE,QAAQ,CAACE,IAAI,CAACU,SAAS;IAClC,CAAC,CAAC,OAAON,KAAK,EAAE;MACZO,OAAO,CAACP,KAAK,CAAC,uCAAuC,EAAEA,KAAK,CAAC;MAC7D,OAAO,KAAK;IAChB;EACJ;AACJ;AAEA,eAAe,IAAIV,WAAW,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}